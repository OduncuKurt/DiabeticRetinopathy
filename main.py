import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import lightgbm as lgb

st.title("ğŸŒ² Random Forest ve LightGBM SÄ±nÄ±flandÄ±rma KarÅŸÄ±laÅŸtÄ±rmasÄ±")
st.markdown("""
Bu uygulama, gÃ¶rsel tabanlÄ± Ã¶zelliklerden elde edilen verileri Random Forest ve LightGBM algoritmalarÄ± kullanarak sÄ±nÄ±flandÄ±rÄ±r.
Test oranÄ±nÄ± ayarlayabilir, iki modelin baÅŸarÄ±sÄ±nÄ± anlÄ±k olarak inceleyebilirsiniz.
""")

# CSV YÃ¼kleme
uploaded_file = st.file_uploader("CSV DosyanÄ±zÄ± YÃ¼kleyin", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("Veri seti baÅŸarÄ±yla yÃ¼klendi!")
    st.write("### ğŸ“Š Veri Seti Ã–nizleme:")
    st.dataframe(df.head())

    # Ã–zellik ve hedef ayÄ±rÄ±mÄ±
    st.sidebar.header("Ã–zellik SeÃ§imi")
    default_features = ['feature1_confidence', 'feature2_x', 'feature3_y',
                       'feature4_width', 'feature5_height', 'feature6_area', 'feature7_aspect_ratio']
    selected_features = st.sidebar.multiselect("KullanÄ±lacak Ã–zellikler", options=df.columns.tolist(), default=default_features)

    if not selected_features or 'label' not in df.columns:
        st.error("LÃ¼tfen geÃ§erli Ã¶zellikler seÃ§in ve 'label' sÃ¼tununun mevcut olduÄŸundan emin olun.")
    else:
        X = df[selected_features]
        y = df['label']

        # EÄŸitim-test bÃ¶lmesi
        test_size = st.slider("Test Veri OranÄ± (%)", min_value=10, max_value=50, value=20)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size/100, random_state=42)

        # Random Forest Modeli
        st.info("Random Forest eÄŸitiliyor...")
        rf_model = RandomForestClassifier(
            n_estimators=500,
            max_depth=15,
            min_samples_split=4,
            max_features='sqrt',
            class_weight='balanced',
            random_state=42
        )
        rf_model.fit(X_train, y_train)
        y_pred_rf = rf_model.predict(X_test)
        acc_rf = accuracy_score(y_test, y_pred_rf)

        st.success(f"ğŸŒ² Random Forest DoÄŸruluk OranÄ±: {acc_rf:.4f}")

        st.write("### ğŸ”¥ Random Forest KarÄ±ÅŸÄ±klÄ±k Matrisi")
        cm_rf = confusion_matrix(y_test, y_pred_rf)
        labels = sorted(np.unique(y))
        fig_rf, ax_rf = plt.subplots(figsize=(6, 4))
        sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Greens', xticklabels=labels, yticklabels=labels, ax=ax_rf)
        ax_rf.set_title("Random Forest Confusion Matrix")
        st.pyplot(fig_rf)

        # LightGBM Modeli
        st.info("LightGBM eÄŸitiliyor...")
        lgb_model = lgb.LGBMClassifier(
            n_estimators=1500,
            max_depth=-1,
            learning_rate=0.03,
            num_leaves=50,
            subsample=0.8,
            colsample_bytree=0.8,
            class_weight='balanced',
            random_state=42
        )
        lgb_model.fit(X_train, y_train)
        y_pred_lgb = lgb_model.predict(X_test)
        acc_lgb = accuracy_score(y_test, y_pred_lgb)

        st.success(f"âš¡ LightGBM DoÄŸruluk OranÄ±: {acc_lgb:.4f}")

        st.write("### ğŸ”¥ LightGBM KarÄ±ÅŸÄ±klÄ±k Matrisi")
        cm_lgb = confusion_matrix(y_test, y_pred_lgb)
        fig_lgb, ax_lgb = plt.subplots(figsize=(6, 4))
        sns.heatmap(cm_lgb, annot=True, fmt='d', cmap='Blues', xticklabels=labels, yticklabels=labels, ax=ax_lgb)
        ax_lgb.set_title("LightGBM Confusion Matrix")
        st.pyplot(fig_lgb)

